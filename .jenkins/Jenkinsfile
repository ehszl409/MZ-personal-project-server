pipeline {
    agent any
    environment {
        GC = credentials('github-spring-cicd') //생성하세여
        GIT_REPO = 'MZ-personal-project-server'
        GIT_USERNAME = 'ehszl409'
        TAG_VERSION = 'v1.0.0'
    }
    triggers {
        githubPush()
    }
    stages {
        stage('maven build, test, packaging(war)') {
            agent {
                docker {
                    image 'maven:3.8.3-openjdk-17'
                    reuseNode true
                    registryUrl 'https://index.docker.io/v1/'
                    registryCredentialsId 'docker-hub'
                }
            }
                steps {
                    sh 'mvn clean install'
                }     
        }
        stage('github create release') {
            steps {
                script { def response = sh(script: """                    
                        curl -sSL \
                              -X POST \
                              -H "Accept: application/vnd.github+json" \
                              -H "Authorization: Bearer ${GC_PSW}" \
                              -H "X-GitHub-Api-Version: 2022-11-28" \
                              https://api.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases \
                              -d '{
                                      "tag_name":"${TAG_VERSION}",
                                      "target_commitish":"main",
                                      "name":"${TAG_VERSION}",
                                      "body":"Description of the release",
                                      "draft":false,
                                      "prerelease":false,
                                      "generate_release_notes":false
                                    }'
                    """, returnStdout: true)

                    def json = readJSON text: "$response"
                    def id = json.id

                    sh "mv target/demo-0.0.1-SNAPSHOT.war ${GIT_REPO}-${TAG_VERSION}.war"
                        
                    sh """
                        curl -sSL \
                            -X POST \
                            -H "Accept: application/vnd.github+json" \
                            -H "Authorization: Bearer ${GC_PSW}" \
                            -H "X-GitHub-Api-Version: 2022-11-28" \
                            -H "Content-Type: application/octet-stream" \
                            "https://uploads.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases/${id}/assets?name=${GIT_REPO}-${TAG_VERSION}.war" \
                            --data-binary "@${GIT_REPO}-${TAG_VERSION}.war"
                    """
             
                }
            }
        
        }     
        stage('dockerfile build'){
            steps{
                script{
                    // Docker hub 에 로그인 하기 위해 사용
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub') {
                        // Dockerfile 로 이미지 생성 
                        // docker.build("태그명", "Dockerfile 경로") docker pipeline 설치 후 사용 가능
                        docker.build("ehszl409/personal-prj-tomcat:${TAG_VERSION}", "./docker_server/")    
                    }
                }
            }
        }
        stage('Docker tomcat Image Push'){
            steps{
                script{
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub'){
                        // 저장된 이미지를 변수에 담고 변수를 푸쉬하는 스크립트
                        def img = docker.image('ehszl409/personal-prj-tomcat')
                        img.push('0.2')
                        img.push('latest')
                    }
                }
            }
        }           
    }
}
