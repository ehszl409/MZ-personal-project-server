pipeline {
    agent any
    environment {
        GC = credentials('MZ-web_token')
        GIT_REPO = 'MZ-web'
        GIT_USERNAME = 'ehszl409'
        TAG_VERSION = "v1.1.$BUILD_NUMBER"
    }
    triggers {
        githubPush()
    }
    stages {
        stage('maven build, test, packaging(war)') {
            agent {
                docker {
                    image 'maven:3.8.3-openjdk-17'
                    reuseNode true
                    registryUrl 'https://index.docker.io/v1/'
                    registryCredentialsId 'docker-hub'
                }
            }
                steps {
                    sh 'mvn clean install'
                }     
        }
        stage('sonarQube testing') {
            steps {
                script {
                    // system configure matching name
                    withSonarQubeEnv('sonarqube') {
                        sh """
                            docker run --rm \
                                -e SONAR_HOST_URL=$SONAR_HOST_URL \
                                -e SONAR_LOGIN=$SONAR_AUTH_TOKEN \
                                -e SONAR_SCANNER_OPTS='-Dsonar.projectKey=springweb -Dsonar.java.binaries=./target' \
                                -v /var/lib/docker/volumes/jenkins-volume/_data/workspace/spring-cicd:/usr/src \
                                sonarsource/sonar-scanner-cli
                        """
                    }
                }
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }        
        }
        stage('github create release') {
            steps {
                script { def response = sh(script: """                    
                        curl -sSL \
                              -X POST \
                              -H "Accept: application/vnd.github+json" \
                              -H "Authorization: Bearer ${GC_PSW}" \
                              -H "X-GitHub-Api-Version: 2022-11-28" \
                              https://api.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases \
                              -d '{
                                      "tag_name":"${TAG_VERSION}",
                                      "target_commitish":"main",
                                      "name":"${TAG_VERSION}",
                                      "body":"Description of the release",
                                      "draft":false,
                                      "prerelease":false,
                                      "generate_release_notes":false
                                    }'
                    """, returnStdout: true)

                    def json = readJSON text: "$response"
                    def id = json.id

                    sh "mv target/demo-0.0.1-SNAPSHOT.war ${GIT_REPO}-${TAG_VERSION}.war"
                        
                    sh """
                        curl -sSL \
                            -X POST \
                            -H "Accept: application/vnd.github+json" \
                            -H "Authorization: Bearer ${GC_PSW}" \
                            -H "X-GitHub-Api-Version: 2022-11-28" \
                            -H "Content-Type: application/octet-stream" \
                            "https://uploads.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases/${id}/assets?name=${GIT_REPO}-${TAG_VERSION}.war" \
                            --data-binary "@${GIT_REPO}-${TAG_VERSION}.war"
                    """
                    sh "mv ${GIT_REPO}-${TAG_VERSION}.war ROOT.war"
                }
            }
        }
        stage('dockerfile build'){
            steps{
                script{
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub') {
                        docker.build("ehszl409/springweb:${TAG_VERSION}", "--no-cache ./")    
                    }
                }
            }
        }
        stage('dockerHub push'){
            steps{
                script{
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub'){
                        def img = docker.image("ehszl409/springweb:${TAG_VERSION}")
                        img.push("${TAG_VERSION}")
                        img.push('latest')
                    }
                }
            }
        }
        stage('dockerRepo push'){
            steps{
                sh "docker -H tcp://192.168.10.3:2375 pull ehszl409/springweb:${TAG_VERSION}"
                sh "docker -H tcp://192.168.10.3:2375 tag ehszl409/springweb:${TAG_VERSION} localhost:5000/springweb:${TAG_VERSION}"
                sh "docker -H tcp://192.168.10.3:2375 tag ehszl409/springweb:${TAG_VERSION} localhost:5000/springweb:latest"
                sh "docker -H tcp://192.168.10.3:2375 push localhost:5000/springweb:${TAG_VERSION}"
                sh "docker -H tcp://192.168.10.3:2375 push localhost:5000/springweb:latest"
                sh "docker -H tcp://192.168.10.3:2375 rmi localhost:5000/springweb:${TAG_VERSION}"
                sh "docker -H tcp://192.168.10.3:2375 rmi localhost:5000/springweb:latest"
                sh "docker -H tcp://192.168.10.3:2375 rmi ehszl409/springweb:${TAG_VERSION}"
            }
        }
        stage ('k8s deploy'){
            steps{
                script {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"'
                    sh 'chmod +x kubectl'
                    withKubeConfig([credentialsId: 'admin.conf', serverUrl: 'https://kube-controller:6443'])
                    { 
                        sh "sed -i 's/springweb:.*/springweb:${TAG_VERSION}/g' springweb.yaml"
                        sh './kubectl apply -f springweb.yaml'
                    }
                }
            }
        }
    }
}
